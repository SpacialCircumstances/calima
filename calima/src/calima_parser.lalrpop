use crate::ast::{Block, Statement, Expr, Literal, NumberType};
use crate::token::{Location, Token};
use crate::token::Token::*;
use crate::lexer::Error;

grammar<'input>(input: &'input str);

extern {
    type Location = Location;
    type Error = Error;

    enum Token<'input> {
        "{" => CurlyBraceOpen,
        "}" => CurlyBraceClose,
        "(" => ParenOpen,
        ")" => ParenClose,
        "[" => SquareBracketOpen,
        "]" => SquareBracketClose,
        "." => Period,
        "," => Comma,
        "name" => NameIdentifier(<&'input str>),
        "typename" => TypeIdentifier(<&'input str>),
        "operator" => OperatorIdentifier(<&'input str>),
        "string" => StringLiteral(<&'input str>),
        "number" => NumberLiteral(<&'input str>),
        "bool" => BooleanLiteral(<bool>),
        "do" => Do,
        "in" => In,
        "let" => Let,
        "fun" => Fun,
        "if" => If,
        "then" => Then,
        "else" => Else,
        "case" => Case,
        "of" => Of,
        "end" => End,
        "type" => Type,
        "region" => Region,
        "=" => Equal,
        "|" => Pipe,
        "import" => Import,
        ":" => Colon,
        "->" => Arrow
    }
}

Sep1<T, S>: Vec<T> = { // (1)
    <v:(<T> S)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

pub Block: Block<'input, Location> = <sts:Statement*> <e:Expression1> => Block {
    statements: sts,
    result: Box::new(e)
};

Statement: Statement<'input, Location> = {
    Do,
    Import,
    Region
};

Region: Statement<'input, Location> = "region" <n:"name"> <pos:@L> => Statement::Region(n, pos);

Do: Statement<'input, Location> = "do" <e:Expression1> "in" <pos:@L> => Statement::Do(e, pos);

Import: Statement<'input, Location> = "import" <n:"name"> <pos:@L> => Statement::Import(n, pos);

Expression1: Expr<'input, Location> = {
    FunctionCall,
    Expression2
}

Expression2: Expr<'input, Location> = {
    Variable,
    LiteralExpr
};

FunctionCall: Expr<'input, Location> = <func:Expression2> <args:Expression2+> <pos:@L> => Expr::FunctionCall(Box::new(func), args, pos);

Variable: Expr<'input, Location> = <elements:Sep1<"name", ".">> <pos:@L> => Expr::Variable(elements, pos);

LiteralExpr: Expr<'input, Location> = <lit:Literal> <pos:@L> => Expr::Literal(lit, pos);

Literal: Literal<'input> = {
    "(" ")" => Literal::Unit,
    <"bool"> => Literal::Boolean(<>),
    <"number"> => Literal::Number(<>, NumberType::Float),
    <"string"> => Literal::String(<>)
}