use crate::ast::*;
use crate::parsing::token::{Location, Token, Span, NumberFormat};
use crate::parsing::token::Token::*;
use crate::parsing::lexer::{Error, ErrorKind};
use crate::symbol_names::IText;
use lalrpop_util::ParseError;
use std::str::FromStr;
use std::convert::TryFrom;

grammar<Data, F>(to_data: &F) where F: Fn(Location, Location) -> Data;

extern {
    type Location = Location;
    type Error = Error;

    enum Token {
        "{" => CurlyBraceOpen,
        "}" => CurlyBraceClose,
        "(" => ParenOpen,
        ")" => ParenClose,
        "[" => SquareBracketOpen,
        "]" => SquareBracketClose,
        "," => Comma,
        "." => Period,
        "name" => NameIdentifier(<IText>),
        "typename" => TypeIdentifier(<IText>),
        "operator" => OperatorIdentifier(<IText>),
        "string" => StringLiteral(<IText>),
        "number" => NumberLiteral(<(IText, NumberFormat)>),
        "bool" => BooleanLiteral(<bool>),
        "do" => Do,
        "in" => In,
        "let" => Let,
        "rec" => Rec,
        "_" => Underscore,
        "fun" => Fun,
        "if" => If,
        "then" => Then,
        "else" => Else,
        "case" => Case,
        "of" => Of,
        "end" => End,
        "type" => Type,
        "=" => Equal,
        "|" => Pipe,
        "import" => Import,
        "opening" => Opening,
        ":" => Colon,
        "->" => Arrow,
        "backtick" => Backtick,
        "'" => Apostrophe,
        "infix" => Infix,
        "prefix" => Prefix,
        "public" => Public
    }
}

#[inline]
Sep1NoEnd<T, S>: Vec<T> = {
    <v:(<T> S)*> => v
};

Sep1<T, S>: Vec<T> = {
    <v:(<T> S)*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

Sep2<T, S>: Vec<T> = {
    <v:(<T> S)+> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

pub TopLevelBlock: TopLevelBlock<Name<Data>, IText, Data> = <top_levels:TopLevelStatement*> => TopLevelBlock(top_levels);

Block: Block<Name<Data>, IText, Data> = {
    <sts:Statement+> "in" <e:Expression0> => Block {
        statements: sts,
        result: Box::new(e)
    },
    <e: Expression0> => Block {
        statements: Vec::new(),
        result: Box::new(e)
    }
};

TopLevelStatement: TopLevelStatement<Name<Data>, IText, Data> = {
    Import,
    <posl:@L> "type" <n:TypeSymbol> <params:GenericTypeKind*> "=" <td:TypeDefinition> <posr:@R> => TopLevelStatement::Type { name: n, params, type_def: td, data: to_data(posl, posr) },
    <vis:Visibility> <lets:Let> => TopLevelStatement::Let(vis, lets),
    <vis:Visibility> <lets:LetOperator> => TopLevelStatement::LetOperator(vis, lets),
};

Visibility: Option<Visibility> = <"public"?> => <>.map(|_| Visibility::Public);

Import: TopLevelStatement<Name<Data>, IText, Data> = <posl:@L> "import" <m:ModuleName> <opens:Opening?> <posr:@R> => TopLevelStatement::Import {
    module: m,
    data: to_data(posl, posr),
    opens: opens.unwrap_or_default()
};

Opening: Vec<(IText, Data)> = "opening" <items:Sep1<OpeningItem, ",">> => items;

OpeningItem: (IText, Data) = <posl:@L> <ident:AnyIdentifier> <posr:@R> => (ident, to_data(posl, posr));

AnyIdentifier: IText = {
    NameSymbol,
    TypeSymbol,
    OperatorSymbol
};

Statement: Statement<Name<Data>, IText, Data> = {
    <Let> => Statement::Let(<>),
    Do,
    <LetOperator> => Statement::LetOperator(<>)
};

Do: Statement<Name<Data>, IText, Data> = <posl:@L> "do" <e:Expression0> <posr:@R> => Statement::Do(e, to_data(posl, posr));

Let: crate::ast::Let<Name<Data>, IText, Data> = <posl:@L> "let" <mods:Modifiers> <pattern:BindPattern0> "=" <value:Expression0> <posr:@R> => crate::ast::Let {
    mods,
    pattern,
    value,
    data: to_data(posl, posr)
};

LetOperator: crate::ast::LetOperator<Name<Data>, IText, Data> = <posl:@L> "let" <mods:Modifiers> <op:OperatorSpec> <n:AnnotatedOperator> "=" <value:Expression0> <posr:@R> => crate::ast::LetOperator {
    mods,
    op,
    name: n.0,
    ta: n.1,
    value,
    data: to_data(posl, posr)
};

Modifiers: Vec<Modifier> = Modifier*;

Modifier: Modifier = {
    "rec" => Modifier::Rec
};

Expression0: Expr<Name<Data>, IText, Data> = {
    If,
    Case,
    Expression1
};

Case: Expr<Name<Data>, IText, Data> = <posl:@L> "case" <value_expr:Expression1> "of" <rows:CaseRow+> "end" <posr:@R> => Expr::Case {
    data: to_data(posl, posr),
    value: Box::new(value_expr),
    matches: rows
};

CaseRow: (MatchPattern<Name<Data>, IText, TypeAnnotation<Name<Data>, IText, Data>, Data>, Block<Name<Data>, IText, Data>) = "|" <pat:MatchPattern0> "->" <block:Block> => (pat, block);

If: Expr<Name<Data>, IText, Data> = <posl:@L> "if" <cond_expr:Expression1> "then" <if_block:Block> "else" <else_block:Block> "end" <posr:@R> => Expr::If {
    data: to_data(posl, posr),
    cond: Box::new(cond_expr),
    if_true: if_block,
    if_false: else_block
};

Expression1: Expr<Name<Data>, IText, Data> = {
    FunctionCall,
    OperatorCall,
    Lambda,
    Expression2
};

RecordExprRow: (IText, Expr<Name<Data>, IText, Data>) = <n:NameSymbol> "=" <expr:Expression0> => (n, expr);

Lambda: Expr<Name<Data>, IText, Data> = <posl:@L> "fun" <params:BindPattern0+>  "->" <block:Block> <posr:@R> => Expr::Lambda { params, body: block, data: to_data(posl, posr) };

FunctionCall: Expr<Name<Data>, IText, Data> = <posl:@L> <func:Expression2> <args:Expression2+> <posr:@R> => Expr::FunctionCall(Box::new(func), args, to_data(posl, posr));

//This long definition ensures that this is actually a operator expression so the grammar is not ambiguous
OperatorCall: Expr<Name<Data>, IText, Data> = <posl:@L> <o0: OperatorExpression?> <o1:OperatorOperator> <mut els:OperatorElement+> <posr:@R> => {
    els.insert(0, o1);
    match o0 {
        Some(oe) => els.insert(0, oe),
        None => ()
    }
    Expr::OperatorCall(els, to_data(posl, posr))
};

OperatorElement: OperatorElement<Name<Data>, IText, Data> = {
    OperatorOperator,
    OperatorExpression
};

OperatorExpression: OperatorElement<Name<Data>, IText, Data> = <posl:@L> <expr:Expression2> <posr:@R> => OperatorElement::Expression(expr, to_data(posl, posr));

OperatorOperator: OperatorElement<Name<Data>, IText, Data> = <posl:@L> <op:OperatorSymbol> <posr:@R> => OperatorElement::Operator(op, to_data(posl, posr));

Expression2: Expr<Name<Data>, IText, Data> = {
    Variable,
    OperatorAsFunction,
    LiteralExpr,
    TupleConstruct,
    "(" <Expression0> ")",
    <posl:@L> "[" <exprs: Sep1<Expression0, ",">> "]" <posr:@R> => Expr::List(exprs, to_data(posl, posr)),
    <posl:@L> "{" <rows: Sep1<RecordExprRow, ",">> "}" <posr:@R> => Expr::Record(rows, to_data(posl, posr)),
};

OperatorAsFunction: Expr<Name<Data>, IText, Data> = <posl:@L> "backtick" <op:OperatorSymbol> "backtick" <posr:@R> => Expr::OperatorAsFunction(op, to_data(posl, posr));

TupleConstruct: Expr<Name<Data>, IText, Data> = <posl:@L> "(" <exprs:Sep2<Expression1, ",">> ")" <posr:@R> => Expr::Tuple(exprs, to_data(posl, posr));

Variable: Expr<Name<Data>, IText, Data> = <name:Name> => Expr::Variable(name);

ModuleName: Name<Data> = <posl:@L> <name:Sep1<TypeSymbol, ".">> <posr:@R> => Name(name, to_data(posl, posr));

TypeName: Name<Data> = <posl:@L> <mut els:Sep1NoEnd<TypeSymbol, ".">> <end:TypeSymbol> <posr:@R> => {
    els.push(end);
    Name(els, to_data(posl, posr))
};

Name: Name<Data> = <posl:@L> <name:Sep1<AnyName, ".">> <posr:@R> => Name(name, to_data(posl, posr));

AnyName: IText = {
    NameSymbol,
    TypeSymbol,
};

LiteralExpr: Expr<Name<Data>, IText, Data> = <posl:@L> <lit:Literal> <posr:@R> => Expr::Literal(lit, to_data(posl, posr));

RecordBindPatternRow: (IText, BindPattern<IText, TypeAnnotation<Name<Data>, IText, Data>, Data>) = <name:NameSymbol> "=" <patt:BindPattern0> => (name, patt);

BindPattern0: BindPattern<IText, TypeAnnotation<Name<Data>, IText, Data>, Data> = {
    <posl:@L> "_" <posr:@R> => BindPattern::Any(to_data(posl, posr)),
    <posl:@L> <id:AnnotatedName> <posr:@R> => BindPattern::Name(id.0, id.1, to_data(posl, posr)),
    "(" <BindPattern0> ")" => <>,
    <posl:@L> "{" <rows:Sep1<RecordBindPatternRow, ",">> "}" <posr:@R> => BindPattern::Record(rows, to_data(posl, posr)),
    <posl:@L> "(" <elements:Sep2<BindPattern0, ",">> ")" <posr:@R> => BindPattern::Tuple(elements, to_data(posl, posr)),
    <posl:@L> "(" ")" <posr:@R> => BindPattern::UnitLiteral(to_data(posl, posr))
};

MatchPattern0: MatchPattern<Name<Data>, IText, TypeAnnotation<Name<Data>, IText, Data>, Data> = {
    MatchPattern1,
    <posl:@L> <variant:TypeName> <patt:MatchPattern1?> <posr:@R> => MatchPattern::SumUnwrap(variant, patt.map(|p| Box::new(p)), to_data(posl, posr)),
};

RecordMatchPatternRow: (IText, MatchPattern<Name<Data>, IText, TypeAnnotation<Name<Data>, IText, Data>, Data>) = <name:NameSymbol> "=" <patt:MatchPattern1> => (name, patt);

MatchPattern1: MatchPattern<Name<Data>, IText, TypeAnnotation<Name<Data>, IText, Data>, Data> = {
    <posl:@L> "_" <posr:@R> => MatchPattern::Any(to_data(posl, posr)),
    <posl:@L> <id:AnnotatedName> <posr:@R> => MatchPattern::Name(id.0, id.1, to_data(posl, posr)),
    <posl:@L> <lit:Literal> <posr:@R> => MatchPattern::Literal(lit, to_data(posl, posr)),
    "(" <MatchPattern0> ")",
    <posl:@L> "{" <rows:Sep1<RecordMatchPatternRow, ",">> "}" <posr:@R> => MatchPattern::Record(rows, to_data(posl, posr)),
    <posl:@L> "(" <elements:Sep2<MatchPattern1, ",">> ")" <posr:@R> => MatchPattern::Tuple(elements, to_data(posl, posr))
};

AnnotatedOperator: (IText, Option<TypeAnnotation<Name<Data>, IText, Data>>) = {
    <OperatorSymbol> => (<>, None),
    "(" <n:OperatorSymbol> ":" <ta:TypeAnnotation0> ")" => (n, Some(ta))
};

AnnotatedName: (IText, Option<TypeAnnotation<Name<Data>, IText, Data>>) = {
    <NameSymbol> => (<>, None),
    "(" <n:NameSymbol> ":" <ta:TypeAnnotation0> ")" => (n, Some(ta))
};

TypeDefinition: TypeDefinition<Name<Data>, IText, Data> = {
    <TypeAnnotation0> => TypeDefinition::Alias(<>),
    Sum,
    "{" <Sep1<RecordTypeRow, ",">> "}" => TypeDefinition::Record(<>)
};

Sum: TypeDefinition<Name<Data>, IText, Data> = "|" <Sep1<SumRow, "|">> => TypeDefinition::Sum(<>);

SumRow: (IText, Option<TypeAnnotation<Name<Data>, IText, Data>>) = {
    <n:TypeSymbol> <ta:TypeAnnotation2?> => (n, ta)
};

RecordTypeRow: (IText, TypeAnnotation<Name<Data>, IText, Data>) = <n:NameSymbol> ":" <ta:TypeAnnotation0> => (n, ta);

pub TypeAnnotation0: TypeAnnotation<Name<Data>, IText, Data> = {
    TypeAnnotation1
};

TypeAnnotation1: TypeAnnotation<Name<Data>, IText, Data> = {
    <inp:TypeAnnotation2> "->" <out:TypeAnnotation1> => TypeAnnotation::Function(Box::new(inp), Box::new(out)),
    <elements:TypeName> <params:TypeAnnotation2+> => TypeAnnotation::Parameterized(elements, params),
    TypeAnnotation2
};

TypeAnnotation2: TypeAnnotation<Name<Data>, IText, Data> = {
    <TypeName> => TypeAnnotation::Name(<>),
    <GenericTypeKind> => TypeAnnotation::Generic(<>),
    "(" <Sep2<TypeAnnotation0, ",">> ")" => TypeAnnotation::Tuple(<>),
    "(" <tk:TypeAnnotation0> ")" => tk,
};

GenericTypeKind: GenericTypeKind<IText, Data> = <posl:@L> <n:NameSymbol> <posr:@R> => GenericTypeKind(n, to_data(posl, posr));

Literal: Literal = {
    "(" ")" => Literal::Unit,
    <"bool"> => Literal::Boolean(<>),
    <n:"number"> => {
        let nt = match n.1 {
            NumberFormat::Integer => NumberType::Integer,
            NumberFormat::Float => NumberType::Float
        };
        Literal::Number(n.0, nt)
    },
    <"string"> => Literal::String(<>)
};

OperatorSpec: OperatorSpecification = {
    <posl:@L> "infix" <assoc:Assoc> <n:"number"> <posr:@R> =>? {
        match u32::from_str(n.0.text().as_str()) {
            Ok(nr) => Ok(OperatorSpecification::Infix(nr, assoc)),
            Err(e) => Err(ParseError::User { error: Error {
                location: Span {
                    left: posl,
                    right: posr
                },
                kind: ErrorKind::InvalidNumber
            }})
        }
    },
    <posl:@L> "prefix" <posr:@R> => OperatorSpecification::Prefix
};

Assoc: Associativity = <posl:@L> <n:"name"> <posr:@L> =>? Associativity::try_from(n.text().as_str()).map_err(|()| ParseError::User { error: Error {
    location: Span {
        left: posl,
        right: posr
    },
    kind: ErrorKind::InvalidNumber
}});

TypeSymbol: IText = <"typename">;

NameSymbol: IText = <"name">;

OperatorSymbol: IText = <"operator">;